/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Units
         * @description Get all combat units for the player faction.
         */
        get: operations["get_units_api_units_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/terrain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Terrain
         * @description Get all terrain tiles for the current game state.
         */
        get: operations["get_terrain_api_terrain_get"];
        /**
         * Update Terrain
         * @description Edit the terrain polygon.
         */
        put: operations["update_terrain_api_terrain_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Move
         * @description Move a unit and return updated rifle squads.
         */
        post: operations["action_move_api_move_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Fire
         * @description Move a unit and return updated rifle squads.
         */
        post: operations["action_fire_api_fire_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assault": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Action Assault
         * @description Move a unit and return updated rifle squads.
         */
        post: operations["action_assault_api_assault_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Scene
         * @description Resets the scene.
         */
        post: operations["reset_scene_api_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Logs */
        get: operations["get_logs_api_logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ActionType
         * @enum {string}
         */
        ActionType: "move" | "fire" | "assault";
        /** AssaultActionLog */
        AssaultActionLog: {
            /** @default assault */
            type: components["schemas"]["ActionType"];
            body: components["schemas"]["AssaultActionRequest"];
            result: components["schemas"]["AssaultActionResult"];
            unit_state: components["schemas"]["CombatUnitsViewState"];
        };
        /**
         * AssaultActionRequest
         * @description Request model for a unit's assault action.
         */
        AssaultActionRequest: {
            /** Unit Id */
            unit_id: number;
            /** Target Id */
            target_id: number;
        };
        /** AssaultActionResult */
        AssaultActionResult: {
            /**
             * Is Valid
             * @default true
             */
            is_valid: boolean;
            /**
             * Is Interrupted
             * @default false
             */
            is_interrupted: boolean;
            result?: components["schemas"]["core__components__AssaultControls__Outcomes"] | null;
        };
        /**
         * CombatUnitsViewState
         * @description View state for all combat units in the game.
         */
        CombatUnitsViewState: {
            objective_state: components["schemas"]["ObjectiveState"];
            /** Has Initiative */
            has_initiative: boolean;
            /** Squads */
            squads: components["schemas"]["SquadModel"][];
        };
        /** FireActionLog */
        FireActionLog: {
            /** @default fire */
            type: components["schemas"]["ActionType"];
            body: components["schemas"]["FireActionRequest"];
            result: components["schemas"]["FireActionResult"];
            unit_state: components["schemas"]["CombatUnitsViewState"];
        };
        /**
         * FireActionRequest
         * @description Request model for a unit's fire action.
         */
        FireActionRequest: {
            /** Unit Id */
            unit_id: number;
            /** Target Id */
            target_id: number;
        };
        /** FireActionResult */
        FireActionResult: {
            /** Is Valid */
            is_valid: boolean;
            /**
             * Is Hit
             * @default false
             */
            is_hit: boolean;
            outcome?: components["schemas"]["core__components__FireControls__Outcomes"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** MoveActionLog */
        MoveActionLog: {
            /** @default move */
            type: components["schemas"]["ActionType"];
            body: components["schemas"]["MoveActionRequest"];
            result: components["schemas"]["MoveActionResult"];
            unit_state: components["schemas"]["CombatUnitsViewState"];
        };
        /**
         * MoveActionRequest
         * @description Request model for a unit's move action.
         */
        MoveActionRequest: {
            /** Unit Id */
            unit_id: number;
            to: components["schemas"]["Vec2"];
        };
        /** MoveActionResult */
        MoveActionResult: {
            /** Is Valid */
            is_valid: boolean;
            /**
             * Is Interrupted
             * @default false
             */
            is_interrupted: boolean;
        };
        /**
         * ObjectiveState
         * @enum {string}
         */
        ObjectiveState: "INCOMPLETE" | "COMPLETED" | "FAILED";
        /**
         * SquadModel
         * @description Represents a view of a single squad in the game.
         */
        SquadModel: {
            /** Unit Id */
            unit_id: number;
            position: components["schemas"]["Vec2"];
            status: components["schemas"]["Status"];
            /** Is Friendly */
            is_friendly: boolean;
            /** No Fire */
            no_fire: boolean;
        };
        /**
         * Status
         * @enum {string}
         */
        Status: "ACTIVE" | "PINNED" | "SUPPRESSED";
        /**
         * TerrainModel
         * @description Represents a view of terrain feature in the game.
         */
        TerrainModel: {
            /** Terrain Id */
            terrain_id: number;
            position: components["schemas"]["Vec2"];
            /** Degrees */
            degrees: number;
            /** Vertices */
            vertices: components["schemas"]["Vec2"][];
            terrain_type: components["schemas"]["Types"];
        };
        /**
         * Types
         * @description Supported terrain types.
         * @enum {string}
         */
        Types: "FOREST" | "ROAD" | "FIELD" | "WATER" | "BUILDING";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** Vec2 */
        Vec2: {
            /** X */
            x: number;
            /** Y */
            y: number;
        };
        /**
         * Outcomes
         * @description Each assault outcome result
         * @enum {string}
         */
        core__components__AssaultControls__Outcomes: "FAIL" | "SUCCESS";
        /**
         * Outcomes
         * @description Each fire outcome and its probability range
         * @enum {number}
         */
        core__components__FireControls__Outcomes: 0.3 | 0.7 | 0.95 | 1;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_units_api_units_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatUnitsViewState"];
                };
            };
        };
    };
    get_terrain_api_terrain_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TerrainModel"][];
                };
            };
        };
    };
    update_terrain_api_terrain_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TerrainModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    action_move_api_move_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MoveActionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatUnitsViewState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    action_fire_api_fire_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FireActionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatUnitsViewState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    action_assault_api_assault_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssaultActionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CombatUnitsViewState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_scene_api_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_logs_api_logs_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["MoveActionLog"] | components["schemas"]["FireActionLog"] | components["schemas"]["AssaultActionLog"])[];
                };
            };
        };
    };
}
